package com.smartcity.dao;

import com.smartcity.domain.Organization;
import com.smartcity.domain.User;
import com.smartcity.exceptions.DbOperationException;
import com.smartcity.exceptions.NotFoundException;
import com.smartcity.mapper.OrganizationMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Repository
public class OrganizationDaoImpl implements OrganizationDao {

    private static final Logger logger = LoggerFactory.getLogger(OrganizationDaoImpl.class);
    private JdbcTemplate jdbcTemplate;
    private OrganizationMapper mapper;

    @Autowired
    public OrganizationDaoImpl(DataSource source, OrganizationMapper mapper) {
        jdbcTemplate = new JdbcTemplate(source);
        this.mapper = mapper;
    }

    @Override
    public Organization create(Organization organization) {
        try {
            GeneratedKeyHolder holder = new GeneratedKeyHolder();
            LocalDateTime currDate = LocalDateTime.now();
            organization.setCreatedDate(currDate);
            organization.setUpdatedDate(currDate);
            jdbcTemplate.update(connection -> createStatement(organization, connection), holder);
            organization.setId(Optional.ofNullable(holder.getKey()).map(Number::longValue)
                    .orElseThrow(() -> new DbOperationException("Create organization error: AutoGeneratedKey = null")));
            return organization;
        } catch (Exception e) {
            logger.error("Can't create organization:{}. Error:{}", organization, e.getMessage());
            throw new DbOperationException("Can't create organization: " + organization +
                    "Create organization Dao method error:" + e);
        }
    }

    @Override
    public Organization findById(Long id) {
        try {
            return jdbcTemplate.queryForObject(Queries.SQL_ORGANIZATION_GET,
                    mapper, id);
        } catch (EmptyResultDataAccessException erda) {
            throw loggedNotFoundException(id);
        } catch (Exception e) {
            logger.error("Can't get organization by id={}. Error: {}", id, e.getMessage());
            throw new DbOperationException("Can't get organization by id = " + id +
                    "Get organization Dao method error:" + e);
        }
    }

    @Override
    public Organization update(Organization organization) {
        int rowsAffected;
        organization.setUpdatedDate(LocalDateTime.now());
        try {
            rowsAffected = jdbcTemplate.update(Queries.SQL_ORGANIZATION_UPDATE,
                    organization.getName(),
                    organization.getAddress(),
                    organization.getUpdatedDate(),
                    organization.getId());
        } catch (Exception e) {
            logger.error("Can't update organization:{}. Error:{}", organization, e.getMessage());
            throw new DbOperationException("Can't update organization: " + organization +
                    "Update organization Dao method error:" + e);
        }
        if (rowsAffected < 1) {
            throw loggedNotFoundException(organization.getId());
        } else return organization;
    }

    @Override
    public boolean delete(Long id) {
        int rowsAffected;
        try {
            rowsAffected = jdbcTemplate.update(Queries.SQL_ORGANIZATION_DELETE, id);
        } catch (Exception e) {
            logger.error("Can't delete organization by id={}. Error: {}", id, e.getMessage());
            throw new DbOperationException("Can't delete organization by id = " + id +
                    "Delete organization Dao method error:" + e);
        }
        if (rowsAffected < 1) {
            throw loggedNotFoundException(id);
        } else return true;
    }

    @Override
    public List<Organization> findAll() {
        try {
            return this.jdbcTemplate.query(Queries.SQL_ORGANIZATION_GET_ALL, mapper);
        } catch (Exception e) {
            logger.error("Can't get all organizations. Error:{}", e.getMessage());
            throw new DbOperationException("Can't get all organizations. GetAll organization Dao method error:" + e);
        }
    }

    @Override
    public boolean addUserToOrganization(Organization organization, User user) {
        try {
            LocalDateTime currDate = LocalDateTime.now();
            jdbcTemplate.update(Queries.SQL_ORGANIZATION_ADD_USER_TO_ORGANIZATION, user.getId(), organization.getId(),
                    currDate,
                    currDate);
            return true;
        } catch (Exception e) {
            logger.error("Can't add user:{} to organization:{}. Error:{}", user, organization, e.getMessage());
            throw new DbOperationException("Can't add user to organization." +
                    " AddUserToOrganization organization Dao method error:" + e);
        }
    }

    @Override
    public boolean removeUserFromOrganization(Organization organization, User user) {
        int rowsAffected;
        try {
            rowsAffected = jdbcTemplate.update(Queries.SQL_ORGANIZATION_REMOVE_USER_FROM_ORGANIZATION,
                    organization.getId(), user.getId());
        } catch (Exception e) {
            logger.error("Can't delete user from organization. User:{}. Organization{}. Error: {}",
                    user, organization, e.getMessage());
            throw new DbOperationException("Can't delete user from organization." +
                    " User = " + user + "Organization = " + organization +
                    "Delete organization Dao method error:" + e);
        }
        if (rowsAffected < 1) {
            logger.error("Can't find user_organization by organizationId = {} and userId = {}",
                    organization.getId(), user.getId());
            throw new NotFoundException("Can't find user_organization by organizationId = "
                    + organization.getId() + " and userId = " + user.getId());
        } else return true;

    }

    private PreparedStatement createStatement(Organization organization, Connection connection) throws SQLException {
        PreparedStatement ps = connection.prepareStatement(Queries.SQL_ORGANIZATION_CREATE,
                Statement.RETURN_GENERATED_KEYS);
        ps.setString(1, organization.getName());
        ps.setString(2, organization.getAddress());
        ps.setObject(3, organization.getCreatedDate());
        ps.setObject(4, organization.getUpdatedDate());
        return ps;
    }

    private NotFoundException loggedNotFoundException(Long id) {
        NotFoundException notFoundException = new NotFoundException("Organization not found.Id = " + id);
        logger.error("Runtime exception. Organization by id = {} not found. Message: {}",
                id, notFoundException.getMessage());
        return notFoundException;
    }

    class Queries {
        static final String SQL_ORGANIZATION_CREATE = "INSERT INTO Organizations(name, address, created_date," +
                " updated_date) values(?,?,?,?)";
        static final String SQL_ORGANIZATION_GET = "SELECT * FROM Organizations where id = ?";
        static final String SQL_ORGANIZATION_UPDATE = "UPDATE Organizations set name = ?, address = ?," +
                " updated_date = ? where id = ?";
        static final String SQL_ORGANIZATION_DELETE = "DELETE FROM Organizations where id = ?";
        static final String SQL_ORGANIZATION_GET_ALL = "Select * from Organizations";
        static final String SQL_ORGANIZATION_ADD_USER_TO_ORGANIZATION = "INSERT INTO Users_organizations" +
                " (user_id, organization_id, created_date, updated_date) VALUES (?, ?, ?, ?)";
        static final String SQL_ORGANIZATION_REMOVE_USER_FROM_ORGANIZATION = "DELETE FROM Users_organizations " +
                "WHERE organization_id=? AND user_id=?";
    }
}

